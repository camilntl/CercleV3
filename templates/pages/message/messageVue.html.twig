{% embed "layouts/layout_nav.html.twig" with {
        title: "Détail du message",
       	classMessages:"bg-purple-200 text-purple-500 dark:bg-purple-700 dark:text-purple-500"
    } %}

	{% block main %}

		<div class="fixed flex items-center space-x-4 bg-white dark:bg-black border-b border-purple-200 w-full left-0 rounded-b-2xl p-6 space-y-6 lg:ml-72" style="top:60px; box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.03);">
			<a href="{{ path('conversation', {'id': message.getConversation()}) }}" class="cursor-pointer">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewbox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6 dark:stroke-white">
					<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"/>
				</svg>
			</a>
{% set otherUserName = '' %}
{% set otherUser = null %} {# Définir otherUser ici #}

{% for user in users %}
    {% if user != app.user %}
        {% set otherUserName = user.firstname ~ ' ' ~ user.lastname %}
        {% set otherUser = user %} {# Mettre à jour otherUser à l'intérieur de la boucle #}
    {% endif %}
{% endfor %}

{% if otherUser is not null %}
    {% include 'components/chat/profilCard.html.twig' with {
        'image_alt': 'Profil user',
        'user': otherUser, 
        'time': '',
        'description': otherUserName, 
    } %}
{% endif %}



		</div>

		<div class="h-16"></div>

		<input class="space-y-5 pb-3 dark:bg-black">

		<div
			id="chat" class="max-w-lg"><!-- Ici, le contenu de la conversation sera injecté par JavaScript -->
		</div>

		<!-- Bloc pour les messages, ici vous devez injecter les messages avec JavaScript -->

		<div id="last" class="h-5"></div>


		{{ form_start(form, {'attr': {'id': 'chatForm'}}) }}

		<div class="w-full fixed bottom-0 left-0 px-6 py-3 lg:py-0 bg-white dark:bg-black" style="padding-bottom: 115px;">
			<label for="default-search" class="mb-2 text-sm font-medium text-lavande-500 sr-only dark:text-white">Envoyer un message</label>
			<div class="flex space-x-2 p-6 lg:ml-72 max-w-lg">
				{{ form_widget(form.content, {'attr': {'class': 'max-w-2xl block w-full px-4 py-3 text-sm rounded-full placeholder-lavande-500 text-lavande-500 bg-purple-200 border border-purple-200 focus:ring-purple-500 focus-visible:outline-purple-500 dark:bg-lavande-900 dark:border-lavande-900'}}) }}
				<button type="submit" class="inline-flex flex-col items-center justify-center w-14 h-12 rounded-full bg-purple-200 text-purple-500 dark:bg-lavande-900">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewbox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ml-1 w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"/>
					</svg>
				</button>
			</div>
		</div>

		{{ form_end(form) }}


			</div>
		</div>
	{% endblock %}
{% endembed %}

<script>
document.getElementById('chatForm').addEventListener('submit', function (event) {
    event.preventDefault();

    var messageContent = document.querySelector('#chatForm input[name="form[content]"]').value;
    console.log(messageContent);

    fetch('/send-message/' + {{ conversation.id }}, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify({ message: messageContent })
    }).then(response => {
        console.log(response);
        if (!response.ok) {
            console.log(response.status);
            throw new Error('Problème de réponse réseau : ' + response.statusText);
        }
        return response.json();
    }).then(data => {
        if (data.status === 'success') {
            console.log('Message envoyé avec succès');

            // Réinitialiser le champ de saisie du message
            document.querySelector('#chatForm input[name="form[content]"]').value = '';
        } else {
            console.error('Erreur du serveur :', data.message);
        }
    }).catch(error => {
        console.error('Erreur lors de l\'envoi du message :', error);
    });
});

// Fonction de récupération des messages
const conversationId = {{ conversation.id }};
// Fonction de récupération des messages
function fetchMessages() {
fetch('/get-messages/' + conversationId).then(response => response.json()).then(messages => {
const chatDiv = document.getElementById('chat');
chatDiv.innerHTML = ''; // Efface les anciens messages
messages.forEach(message => { // Créez le HTML pour chaque message ici
if (message.author_id == {{ app.user.id }}) {
chatDiv.innerHTML += `<div class="flex flex-col items-end pr-2 space-y-1">
																<label class="text-2xs dark:text-white">${message.authorName}</label>
                    <div class="py-2 px-3 rounded-full bg-purple-200 w-fit max-w-2xs" style="box-shadow: 0px 4px 4px 0px rgba(131, 8, 255, 0.02);">
                        <p class="text-xs text-purple-700 text-justify font-medium">${message.content}</p>
                    </div>
                    <p class="text-2xs text-lavande-400"></p>
                </div>`;
} else {
chatDiv.innerHTML += `<div class="flex items-start pl-2 space-y-2 space-x-2 mb-1">
					<label class="text-2xs dark:text-white">${message.authorName}</label>

                    <div class="space-y-1">
                        <div class="py-2 px-3 rounded-2xl bg-blue-100 w-fit max-w-2xs" style="box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.03);">
                            <p class="text-xs text-purple-700 text-justify font-medium">${message.content}</p>
                        </div>
                    </div>
                </div>`;
}
});
}).catch(error => {
console.error('Erreur lors de la récupération des messages :', error);
});
// Après avoir ajouté les messages à la page
    const lastMessage = document.getElementById('last');
    if (lastMessage) {
        lastMessage.scrollIntoView({ behavior: 'smooth' });
    }
}


// Lancer le polling
setInterval(fetchMessages, 1000);</script>
